mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE)
}))
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 100) %>%
product_text_pipeline()
disclaimer <- "While we aim to supply accurate product information it is sourced by manufacturers suppliers and marketplace sellers and has not been provided by Overstock"
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = " ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE)
}))
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 100) %>%
product_text_pipeline()
View(test)
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 100, skip = 1000) %>%
product_text_pipeline()
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 100, skip = 1000) %>%
product_text_pipeline()
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 3000) %>%
product_text_pipeline()
compare <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30)
View(compare)
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = " ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30) %>%
product_text_pipeline()
compare <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30)
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30) %>%
product_text_pipeline()
if(!("spacy_condaenv" %in% reticulate::conda_list()$name)){
spacy_install()
}
spacy_initialize() # cant run on older versions of pip (< v10.0)
library(spacyr)
if(!("spacy_condaenv" %in% reticulate::conda_list()$name)){
spacy_install()
}
spacy_initialize() # cant run on older versions of pip (< v10.0)
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
spacyr::process_document() %>%
spacyr::get_tokens()
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30) %>%
product_text_pipeline()
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
spacyr::process_document(multithread = TRUE) %>%
spacyr::get_tokens()
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30) %>%
product_text_pipeline()
View(compare)
tets
test
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 1) %>%
product_text_pipeline()
test
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
spacyr::spacy_parse(multithread = T)
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 1) %>%
product_text_pipeline()
?cast_dtm
?cast_dtm
??cast_dtm
library(tidytext)
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
cast_dtm()
spacyr::spacy_parse(multithread = T)
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 1) %>%
product_text_pipeline()
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
cast_dtm(.$text)
spacyr::spacy_parse(multithread = T)
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 1) %>%
product_text_pipeline()
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
cast_dtm(.$text) %>%
spacyr::spacy_parse(multithread = T)
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 1) %>%
product_text_pipeline()
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
cast_dtm(.$text) %>%
spacyr::spacy_parse(multithread = T)
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 1) %>%
product_text_pipeline()
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
spacyr::process_document(.$text, multithread = T) %>%
spacyr::entity_consolidate()
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 1) %>%
product_text_pipeline()
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
# gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
# gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 1) %>%
product_text_pipeline()
compare <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30)
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30) %>%
product_text_pipeline()
compare <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30)
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
test <- read_csv("../data/product_text/table_export_DATA.csv", n_max = 30) %>%
product_text_pipeline()
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
# gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_chunkwise(text_file_in, chunk_size=chunk_size) %>%
product_text_pipeline %>%
write_chunkwise(text_file_out)
}
library(tidyverse)
library(chunked)
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_chunkwise(text_file_in, chunk_size=chunk_size) %>%
product_text_pipeline %>%
write_chunkwise(text_file_out)
}
file <- "../data/product_text/table_export_DATA.csv"
chunked_pipeline(text_file_in = "../data/product_text/table_export_DATA.csv", text_file_out = "../data/product_text/corpus_clean_1")
product_text_pipeline <- function(product_text)
{
product_text %>%
transmute()
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_chunkwise(text_file_in, chunk_size=chunk_size) %>%
product_text_pipeline %>%
write_chunkwise(text_file_out)
}
chunked_pipeline(text_file_in = "../data/product_text/table_export_DATA.csv", text_file_out = "../data/product_text/corpus_clean_1")
product_text_pipeline <- function(product_text)
{
product_text %>%
transmute() %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_chunkwise(text_file_in, chunk_size=chunk_size) %>%
product_text_pipeline %>%
write_chunkwise(text_file_out)
}
chunked_pipeline(text_file_in = "../data/product_text/table_export_DATA.csv", text_file_out = "../data/product_text/corpus_clean_1")
View(compare)
product_text_pipeline <- function(product_text)
{
product_text %>%
transmute(text = paste(PRO_NAME, SHORT_DESCRIPTION, PRO_DESC, PRO_BRAND_NAME, PRO_MATERIALS, PRO_SHORT_NAME, sep = ". ")) %>%
#unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
write_csv(compare, path = "../data/test_chunk.csv")
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_chunkwise(text_file_in, chunk_size=chunk_size) %>%
product_text_pipeline %>%
write_chunkwise(text_file_out)
}
chunked_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
write_csv(compare, path = "../data/product_text/test_chunk.csv")
chunked_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
product_text_pipeline <- function(product_text)
{
product_text %>%
transmute(text = paste(.$PRO_NAME, .$SHORT_DESCRIPTION, .$PRO_DESC, .$PRO_BRAND_NAME, .$PRO_MATERIALS, .$PRO_SHORT_NAME, sep = ". ")) %>%
#unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_chunkwise(text_file_in, chunk_size=chunk_size) %>%
product_text_pipeline %>%
write_chunkwise(text_file_out)
}
chunked_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_csv_chunked(file = text_file_in, callback = product_text_pipeline, chunk_size=chunk_size) %>%
write_csv(text_file_out)
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_csv_chunked(file = text_file_in, callback = product_text_pipeline, chunk_size=chunk_size) %>%
write_csv(text_file_out)
}
chunked_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
?read_csv_chunked
product_text_pipeline <- function(product_text, pos)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_csv_chunked(file = text_file_in, callback = product_text_pipeline, chunk_size=chunk_size) %>%
write_csv(text_file_out)
}
chunked_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
product_text_pipeline <- function(product_text, pos)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
})) %>%
as_data_frame()
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=5000)
{
read_csv_chunked(file = text_file_in, callback = product_text_pipeline, chunk_size=chunk_size) %>%
write_csv(text_file_out)
}
chunked_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
product_text_pipeline <- function(product_text)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
product_text_pipeline <- function(product_text, pos)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
chunked_pipeline <- function(text_file_in, text_file_out, chunk_size=2)
{
read_csv_chunked(file = text_file_in, callback = product_text_pipeline, chunk_size=chunk_size) %>%
write_csv(text_file_out)
}
chunked_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
io_pipeline <- function(text_file_in, text_file_out)
{
read_csv_chunked(file = text_file_in, callback = product_text_pipeline, chunk_size=chunk_size) %>%
write_csv(text_file_out)
}
io_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
io_pipeline <- function(text_file_in, text_file_out)
{
read_csv(file = text_file_in, callback = product_text_pipeline) %>%
write_csv(text_file_out)
}
io_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
product_text_pipeline <- function(product_text, pos)
{
product_text %>%
unite(., text, PRO_NAME:PRO_SHORT_NAME, sep = ". ", remove = TRUE) %>%
mutate(text = map_chr(text, function(y) {gsub("<[^>]+>", " ", y) %>%  # Remove anything in between brackets
gsub("[^[:alnum:] ]", " ", .) %>%  # Remove non alpha-numeric characters
gsub("[0-9]", " ", .) %>% # Remove all numbers
gsub("(^| ).( |$)", " ", .) %>% # Remove all single characters
gsub("^ *|(?<= ) | *$", "", ., perl = TRUE) %>%  # Replace all multiple spaces with a single space
gsub(disclaimer, "", ., fixed = TRUE) %>%  # Removes any instance of the description disclaimer
gsub("NA", "", ., fixed = TRUE) # Removes all NA words
}))
}
io_pipeline <- function(text_file_in, text_file_out)
{
read_csv(file = text_file_in) %>%
product_text_pipeline() %>%
write_csv(text_file_out)
}
io_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1")
io_pipeline(text_file_in = "../data/product_text/test_chunk.csv", text_file_out = "../data/product_text/corpus_clean_1.csv")
